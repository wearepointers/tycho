// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AccountSession is an object representing the database table.
type AccountSession struct {
	ID               string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID        string    `boil:"account_id" json:"accountID" toml:"account_id" yaml:"account_id"`
	RefreshTokenHash string    `boil:"refresh_token_hash" json:"refreshTokenHash" toml:"refresh_token_hash" yaml:"refresh_token_hash"`
	IPAddress        string    `boil:"ip_address" json:"ipAddress" toml:"ip_address" yaml:"ip_address"`
	UserAgent        string    `boil:"user_agent" json:"userAgent" toml:"user_agent" yaml:"user_agent"`
	ExpiresAt        time.Time `boil:"expires_at" json:"expiresAt" toml:"expires_at" yaml:"expires_at"`
	CreatedAt        time.Time `boil:"created_at" json:"createdAt" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updatedAt" toml:"updated_at" yaml:"updated_at"`
	DeletedAt        null.Time `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *accountSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountSessionColumns = struct {
	ID               string
	AccountID        string
	RefreshTokenHash string
	IPAddress        string
	UserAgent        string
	ExpiresAt        string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	AccountID:        "account_id",
	RefreshTokenHash: "refresh_token_hash",
	IPAddress:        "ip_address",
	UserAgent:        "user_agent",
	ExpiresAt:        "expires_at",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

var AccountSessionTableColumns = struct {
	ID               string
	AccountID        string
	RefreshTokenHash string
	IPAddress        string
	UserAgent        string
	ExpiresAt        string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "account_session.id",
	AccountID:        "account_session.account_id",
	RefreshTokenHash: "account_session.refresh_token_hash",
	IPAddress:        "account_session.ip_address",
	UserAgent:        "account_session.user_agent",
	ExpiresAt:        "account_session.expires_at",
	CreatedAt:        "account_session.created_at",
	UpdatedAt:        "account_session.updated_at",
	DeletedAt:        "account_session.deleted_at",
}

// Generated where

var AccountSessionWhere = struct {
	ID               whereHelperstring
	AccountID        whereHelperstring
	RefreshTokenHash whereHelperstring
	IPAddress        whereHelperstring
	UserAgent        whereHelperstring
	ExpiresAt        whereHelpertime_Time
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"account_session\".\"id\""},
	AccountID:        whereHelperstring{field: "\"account_session\".\"account_id\""},
	RefreshTokenHash: whereHelperstring{field: "\"account_session\".\"refresh_token_hash\""},
	IPAddress:        whereHelperstring{field: "\"account_session\".\"ip_address\""},
	UserAgent:        whereHelperstring{field: "\"account_session\".\"user_agent\""},
	ExpiresAt:        whereHelpertime_Time{field: "\"account_session\".\"expires_at\""},
	CreatedAt:        whereHelpertime_Time{field: "\"account_session\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"account_session\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"account_session\".\"deleted_at\""},
}

// AccountSessionRels is where relationship names are stored.
var AccountSessionRels = struct {
	Account string
}{
	Account: "Account",
}

// accountSessionR is where relationships are stored.
type accountSessionR struct {
	Account *Account `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
}

// NewStruct creates a new relationship struct
func (*accountSessionR) NewStruct() *accountSessionR {
	return &accountSessionR{}
}

func (r *accountSessionR) GetAccount() *Account {
	if r == nil {
		return nil
	}
	return r.Account
}

// accountSessionL is where Load methods for each relationship are stored.
type accountSessionL struct{}

var (
	accountSessionAllColumns            = []string{"id", "account_id", "refresh_token_hash", "ip_address", "user_agent", "expires_at", "created_at", "updated_at", "deleted_at"}
	accountSessionColumnsWithoutDefault = []string{"account_id", "refresh_token_hash", "ip_address", "user_agent", "expires_at"}
	accountSessionColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	accountSessionPrimaryKeyColumns     = []string{"id"}
	accountSessionGeneratedColumns      = []string{}
)

type (
	// AccountSessionSlice is an alias for a slice of pointers to AccountSession.
	// This should almost always be used instead of []AccountSession.
	AccountSessionSlice []*AccountSession
	// AccountSessionHook is the signature for custom AccountSession hook methods
	AccountSessionHook func(context.Context, boil.ContextExecutor, *AccountSession) error

	accountSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountSessionType                 = reflect.TypeOf(&AccountSession{})
	accountSessionMapping              = queries.MakeStructMapping(accountSessionType)
	accountSessionPrimaryKeyMapping, _ = queries.BindMapping(accountSessionType, accountSessionMapping, accountSessionPrimaryKeyColumns)
	accountSessionInsertCacheMut       sync.RWMutex
	accountSessionInsertCache          = make(map[string]insertCache)
	accountSessionUpdateCacheMut       sync.RWMutex
	accountSessionUpdateCache          = make(map[string]updateCache)
	accountSessionUpsertCacheMut       sync.RWMutex
	accountSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var accountSessionAfterSelectMu sync.Mutex
var accountSessionAfterSelectHooks []AccountSessionHook

var accountSessionBeforeInsertMu sync.Mutex
var accountSessionBeforeInsertHooks []AccountSessionHook
var accountSessionAfterInsertMu sync.Mutex
var accountSessionAfterInsertHooks []AccountSessionHook

var accountSessionBeforeUpdateMu sync.Mutex
var accountSessionBeforeUpdateHooks []AccountSessionHook
var accountSessionAfterUpdateMu sync.Mutex
var accountSessionAfterUpdateHooks []AccountSessionHook

var accountSessionBeforeDeleteMu sync.Mutex
var accountSessionBeforeDeleteHooks []AccountSessionHook
var accountSessionAfterDeleteMu sync.Mutex
var accountSessionAfterDeleteHooks []AccountSessionHook

var accountSessionBeforeUpsertMu sync.Mutex
var accountSessionBeforeUpsertHooks []AccountSessionHook
var accountSessionAfterUpsertMu sync.Mutex
var accountSessionAfterUpsertHooks []AccountSessionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccountSession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountSessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AccountSession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountSessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AccountSession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountSessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AccountSession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountSessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AccountSession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountSessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AccountSession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountSessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AccountSession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountSessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AccountSession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountSessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AccountSession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountSessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountSessionHook registers your hook function for all future operations.
func AddAccountSessionHook(hookPoint boil.HookPoint, accountSessionHook AccountSessionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		accountSessionAfterSelectMu.Lock()
		accountSessionAfterSelectHooks = append(accountSessionAfterSelectHooks, accountSessionHook)
		accountSessionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		accountSessionBeforeInsertMu.Lock()
		accountSessionBeforeInsertHooks = append(accountSessionBeforeInsertHooks, accountSessionHook)
		accountSessionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		accountSessionAfterInsertMu.Lock()
		accountSessionAfterInsertHooks = append(accountSessionAfterInsertHooks, accountSessionHook)
		accountSessionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		accountSessionBeforeUpdateMu.Lock()
		accountSessionBeforeUpdateHooks = append(accountSessionBeforeUpdateHooks, accountSessionHook)
		accountSessionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		accountSessionAfterUpdateMu.Lock()
		accountSessionAfterUpdateHooks = append(accountSessionAfterUpdateHooks, accountSessionHook)
		accountSessionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		accountSessionBeforeDeleteMu.Lock()
		accountSessionBeforeDeleteHooks = append(accountSessionBeforeDeleteHooks, accountSessionHook)
		accountSessionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		accountSessionAfterDeleteMu.Lock()
		accountSessionAfterDeleteHooks = append(accountSessionAfterDeleteHooks, accountSessionHook)
		accountSessionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		accountSessionBeforeUpsertMu.Lock()
		accountSessionBeforeUpsertHooks = append(accountSessionBeforeUpsertHooks, accountSessionHook)
		accountSessionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		accountSessionAfterUpsertMu.Lock()
		accountSessionAfterUpsertHooks = append(accountSessionAfterUpsertHooks, accountSessionHook)
		accountSessionAfterUpsertMu.Unlock()
	}
}

// One returns a single accountSession record from the query.
func (q accountSessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AccountSession, error) {
	o := &AccountSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: failed to execute a one query for account_session")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AccountSession records from the query.
func (q accountSessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (AccountSessionSlice, error) {
	var o []*AccountSession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dm: failed to assign all query results to AccountSession slice")
	}

	if len(accountSessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AccountSession records in the query.
func (q accountSessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to count account_session rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q accountSessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dm: failed to check if account_session exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *AccountSession) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountSessionL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountSession interface{}, mods queries.Applicator) error {
	var slice []*AccountSession
	var object *AccountSession

	if singular {
		var ok bool
		object, ok = maybeAccountSession.(*AccountSession)
		if !ok {
			object = new(AccountSession)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccountSession)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccountSession))
			}
		}
	} else {
		s, ok := maybeAccountSession.(*[]*AccountSession)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccountSession)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccountSession))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &accountSessionR{}
		}
		args[object.AccountID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountSessionR{}
			}

			args[obj.AccountID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`account.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountSessions = append(foreign.R.AccountSessions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountSessions = append(foreign.R.AccountSessions, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the accountSession to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AccountSessions.
func (o *AccountSession) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"account_session\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, accountSessionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &accountSessionR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountSessions: AccountSessionSlice{o},
		}
	} else {
		related.R.AccountSessions = append(related.R.AccountSessions, o)
	}

	return nil
}

// AccountSessions retrieves all the records using an executor.
func AccountSessions(mods ...qm.QueryMod) accountSessionQuery {
	mods = append(mods, qm.From("\"account_session\""), qmhelper.WhereIsNull("\"account_session\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"account_session\".*"})
	}

	return accountSessionQuery{q}
}

// FindAccountSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccountSession(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AccountSession, error) {
	accountSessionObj := &AccountSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"account_session\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, accountSessionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: unable to select from account_session")
	}

	if err = accountSessionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return accountSessionObj, err
	}

	return accountSessionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccountSession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dm: no account_session provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountSessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountSessionInsertCacheMut.RLock()
	cache, cached := accountSessionInsertCache[key]
	accountSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountSessionAllColumns,
			accountSessionColumnsWithDefault,
			accountSessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountSessionType, accountSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountSessionType, accountSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"account_session\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"account_session\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dm: unable to insert into account_session")
	}

	if !cached {
		accountSessionInsertCacheMut.Lock()
		accountSessionInsertCache[key] = cache
		accountSessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AccountSession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccountSession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accountSessionUpdateCacheMut.RLock()
	cache, cached := accountSessionUpdateCache[key]
	accountSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountSessionAllColumns,
			accountSessionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dm: unable to update account_session, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"account_session\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, accountSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountSessionType, accountSessionMapping, append(wl, accountSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update account_session row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by update for account_session")
	}

	if !cached {
		accountSessionUpdateCacheMut.Lock()
		accountSessionUpdateCache[key] = cache
		accountSessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q accountSessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all for account_session")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected for account_session")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountSessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"account_session\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, accountSessionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all in accountSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected all in update all accountSession")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AccountSession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dm: no account_session provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountSessionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountSessionUpsertCacheMut.RLock()
	cache, cached := accountSessionUpsertCache[key]
	accountSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			accountSessionAllColumns,
			accountSessionColumnsWithDefault,
			accountSessionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			accountSessionAllColumns,
			accountSessionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dm: unable to upsert account_session, could not build update column list")
		}

		ret := strmangle.SetComplement(accountSessionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(accountSessionPrimaryKeyColumns) == 0 {
				return errors.New("dm: unable to upsert account_session, could not build conflict column list")
			}

			conflict = make([]string, len(accountSessionPrimaryKeyColumns))
			copy(conflict, accountSessionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"account_session\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(accountSessionType, accountSessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountSessionType, accountSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dm: unable to upsert account_session")
	}

	if !cached {
		accountSessionUpsertCacheMut.Lock()
		accountSessionUpsertCache[key] = cache
		accountSessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AccountSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccountSession) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("dm: no AccountSession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountSessionPrimaryKeyMapping)
		sql = "DELETE FROM \"account_session\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"account_session\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(accountSessionType, accountSessionMapping, append(wl, accountSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete from account_session")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by delete for account_session")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q accountSessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dm: no accountSessionQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from account_session")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for account_session")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountSessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(accountSessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountSessionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"account_session\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountSessionPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountSessionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"account_session\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, accountSessionPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from accountSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for account_session")
	}

	if len(accountSessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccountSession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAccountSession(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountSessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"account_session\".* FROM \"account_session\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountSessionPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dm: unable to reload all in AccountSessionSlice")
	}

	*o = slice

	return nil
}

// AccountSessionExists checks if the AccountSession row exists.
func AccountSessionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"account_session\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dm: unable to check if account_session exists")
	}

	return exists, nil
}

// Exists checks if the AccountSession row exists.
func (o *AccountSession) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AccountSessionExists(ctx, exec, o.ID)
}
