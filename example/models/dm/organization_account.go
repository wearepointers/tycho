// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrganizationAccount is an object representing the database table.
type OrganizationAccount struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrganizationID string    `boil:"organization_id" json:"organizationID" toml:"organization_id" yaml:"organization_id"`
	AccountID      string    `boil:"account_id" json:"accountID" toml:"account_id" yaml:"account_id"`
	Role           Role      `boil:"role" json:"role" toml:"role" yaml:"role"`
	CreatedAt      time.Time `boil:"created_at" json:"createdAt" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updatedAt" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *organizationAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationAccountColumns = struct {
	ID             string
	OrganizationID string
	AccountID      string
	Role           string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	OrganizationID: "organization_id",
	AccountID:      "account_id",
	Role:           "role",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var OrganizationAccountTableColumns = struct {
	ID             string
	OrganizationID string
	AccountID      string
	Role           string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "organization_account.id",
	OrganizationID: "organization_account.organization_id",
	AccountID:      "organization_account.account_id",
	Role:           "organization_account.role",
	CreatedAt:      "organization_account.created_at",
	UpdatedAt:      "organization_account.updated_at",
	DeletedAt:      "organization_account.deleted_at",
}

// Generated where

type whereHelperRole struct{ field string }

func (w whereHelperRole) EQ(x Role) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperRole) NEQ(x Role) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperRole) LT(x Role) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperRole) LTE(x Role) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperRole) GT(x Role) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperRole) GTE(x Role) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperRole) IN(slice []Role) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperRole) NIN(slice []Role) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var OrganizationAccountWhere = struct {
	ID             whereHelperstring
	OrganizationID whereHelperstring
	AccountID      whereHelperstring
	Role           whereHelperRole
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "\"organization_account\".\"id\""},
	OrganizationID: whereHelperstring{field: "\"organization_account\".\"organization_id\""},
	AccountID:      whereHelperstring{field: "\"organization_account\".\"account_id\""},
	Role:           whereHelperRole{field: "\"organization_account\".\"role\""},
	CreatedAt:      whereHelpertime_Time{field: "\"organization_account\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"organization_account\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"organization_account\".\"deleted_at\""},
}

// OrganizationAccountRels is where relationship names are stored.
var OrganizationAccountRels = struct {
	Account      string
	Organization string
}{
	Account:      "Account",
	Organization: "Organization",
}

// organizationAccountR is where relationships are stored.
type organizationAccountR struct {
	Account      *Account      `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	Organization *Organization `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
}

// NewStruct creates a new relationship struct
func (*organizationAccountR) NewStruct() *organizationAccountR {
	return &organizationAccountR{}
}

func (r *organizationAccountR) GetAccount() *Account {
	if r == nil {
		return nil
	}
	return r.Account
}

func (r *organizationAccountR) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

// organizationAccountL is where Load methods for each relationship are stored.
type organizationAccountL struct{}

var (
	organizationAccountAllColumns            = []string{"id", "organization_id", "account_id", "role", "created_at", "updated_at", "deleted_at"}
	organizationAccountColumnsWithoutDefault = []string{"organization_id", "account_id", "role"}
	organizationAccountColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	organizationAccountPrimaryKeyColumns     = []string{"id"}
	organizationAccountGeneratedColumns      = []string{}
)

type (
	// OrganizationAccountSlice is an alias for a slice of pointers to OrganizationAccount.
	// This should almost always be used instead of []OrganizationAccount.
	OrganizationAccountSlice []*OrganizationAccount
	// OrganizationAccountHook is the signature for custom OrganizationAccount hook methods
	OrganizationAccountHook func(context.Context, boil.ContextExecutor, *OrganizationAccount) error

	organizationAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationAccountType                 = reflect.TypeOf(&OrganizationAccount{})
	organizationAccountMapping              = queries.MakeStructMapping(organizationAccountType)
	organizationAccountPrimaryKeyMapping, _ = queries.BindMapping(organizationAccountType, organizationAccountMapping, organizationAccountPrimaryKeyColumns)
	organizationAccountInsertCacheMut       sync.RWMutex
	organizationAccountInsertCache          = make(map[string]insertCache)
	organizationAccountUpdateCacheMut       sync.RWMutex
	organizationAccountUpdateCache          = make(map[string]updateCache)
	organizationAccountUpsertCacheMut       sync.RWMutex
	organizationAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationAccountAfterSelectMu sync.Mutex
var organizationAccountAfterSelectHooks []OrganizationAccountHook

var organizationAccountBeforeInsertMu sync.Mutex
var organizationAccountBeforeInsertHooks []OrganizationAccountHook
var organizationAccountAfterInsertMu sync.Mutex
var organizationAccountAfterInsertHooks []OrganizationAccountHook

var organizationAccountBeforeUpdateMu sync.Mutex
var organizationAccountBeforeUpdateHooks []OrganizationAccountHook
var organizationAccountAfterUpdateMu sync.Mutex
var organizationAccountAfterUpdateHooks []OrganizationAccountHook

var organizationAccountBeforeDeleteMu sync.Mutex
var organizationAccountBeforeDeleteHooks []OrganizationAccountHook
var organizationAccountAfterDeleteMu sync.Mutex
var organizationAccountAfterDeleteHooks []OrganizationAccountHook

var organizationAccountBeforeUpsertMu sync.Mutex
var organizationAccountBeforeUpsertHooks []OrganizationAccountHook
var organizationAccountAfterUpsertMu sync.Mutex
var organizationAccountAfterUpsertHooks []OrganizationAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrganizationAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrganizationAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrganizationAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrganizationAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrganizationAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrganizationAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrganizationAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrganizationAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrganizationAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationAccountHook registers your hook function for all future operations.
func AddOrganizationAccountHook(hookPoint boil.HookPoint, organizationAccountHook OrganizationAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		organizationAccountAfterSelectMu.Lock()
		organizationAccountAfterSelectHooks = append(organizationAccountAfterSelectHooks, organizationAccountHook)
		organizationAccountAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		organizationAccountBeforeInsertMu.Lock()
		organizationAccountBeforeInsertHooks = append(organizationAccountBeforeInsertHooks, organizationAccountHook)
		organizationAccountBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		organizationAccountAfterInsertMu.Lock()
		organizationAccountAfterInsertHooks = append(organizationAccountAfterInsertHooks, organizationAccountHook)
		organizationAccountAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		organizationAccountBeforeUpdateMu.Lock()
		organizationAccountBeforeUpdateHooks = append(organizationAccountBeforeUpdateHooks, organizationAccountHook)
		organizationAccountBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		organizationAccountAfterUpdateMu.Lock()
		organizationAccountAfterUpdateHooks = append(organizationAccountAfterUpdateHooks, organizationAccountHook)
		organizationAccountAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		organizationAccountBeforeDeleteMu.Lock()
		organizationAccountBeforeDeleteHooks = append(organizationAccountBeforeDeleteHooks, organizationAccountHook)
		organizationAccountBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		organizationAccountAfterDeleteMu.Lock()
		organizationAccountAfterDeleteHooks = append(organizationAccountAfterDeleteHooks, organizationAccountHook)
		organizationAccountAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		organizationAccountBeforeUpsertMu.Lock()
		organizationAccountBeforeUpsertHooks = append(organizationAccountBeforeUpsertHooks, organizationAccountHook)
		organizationAccountBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		organizationAccountAfterUpsertMu.Lock()
		organizationAccountAfterUpsertHooks = append(organizationAccountAfterUpsertHooks, organizationAccountHook)
		organizationAccountAfterUpsertMu.Unlock()
	}
}

// One returns a single organizationAccount record from the query.
func (q organizationAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationAccount, error) {
	o := &OrganizationAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: failed to execute a one query for organization_account")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrganizationAccount records from the query.
func (q organizationAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationAccountSlice, error) {
	var o []*OrganizationAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dm: failed to assign all query results to OrganizationAccount slice")
	}

	if len(organizationAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrganizationAccount records in the query.
func (q organizationAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to count organization_account rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organizationAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dm: failed to check if organization_account exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *OrganizationAccount) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// Organization pointed to by the foreign key.
func (o *OrganizationAccount) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationAccountL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationAccount interface{}, mods queries.Applicator) error {
	var slice []*OrganizationAccount
	var object *OrganizationAccount

	if singular {
		var ok bool
		object, ok = maybeOrganizationAccount.(*OrganizationAccount)
		if !ok {
			object = new(OrganizationAccount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganizationAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganizationAccount))
			}
		}
	} else {
		s, ok := maybeOrganizationAccount.(*[]*OrganizationAccount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganizationAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganizationAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &organizationAccountR{}
		}
		args[object.AccountID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationAccountR{}
			}

			args[obj.AccountID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`account.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.OrganizationAccounts = append(foreign.R.OrganizationAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.OrganizationAccounts = append(foreign.R.OrganizationAccounts, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationAccountL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationAccount interface{}, mods queries.Applicator) error {
	var slice []*OrganizationAccount
	var object *OrganizationAccount

	if singular {
		var ok bool
		object, ok = maybeOrganizationAccount.(*OrganizationAccount)
		if !ok {
			object = new(OrganizationAccount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrganizationAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrganizationAccount))
			}
		}
	} else {
		s, ok := maybeOrganizationAccount.(*[]*OrganizationAccount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrganizationAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrganizationAccount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &organizationAccountR{}
		}
		args[object.OrganizationID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationAccountR{}
			}

			args[obj.OrganizationID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`organization`),
		qm.WhereIn(`organization.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`organization.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(organizationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.OrganizationAccounts = append(foreign.R.OrganizationAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.OrganizationAccounts = append(foreign.R.OrganizationAccounts, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the organizationAccount to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.OrganizationAccounts.
func (o *OrganizationAccount) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organization_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, organizationAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &organizationAccountR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			OrganizationAccounts: OrganizationAccountSlice{o},
		}
	} else {
		related.R.OrganizationAccounts = append(related.R.OrganizationAccounts, o)
	}

	return nil
}

// SetOrganization of the organizationAccount to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.OrganizationAccounts.
func (o *OrganizationAccount) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organization_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, organizationAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &organizationAccountR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			OrganizationAccounts: OrganizationAccountSlice{o},
		}
	} else {
		related.R.OrganizationAccounts = append(related.R.OrganizationAccounts, o)
	}

	return nil
}

// OrganizationAccounts retrieves all the records using an executor.
func OrganizationAccounts(mods ...qm.QueryMod) organizationAccountQuery {
	mods = append(mods, qm.From("\"organization_account\""), qmhelper.WhereIsNull("\"organization_account\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"organization_account\".*"})
	}

	return organizationAccountQuery{q}
}

// FindOrganizationAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganizationAccount(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OrganizationAccount, error) {
	organizationAccountObj := &OrganizationAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organization_account\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, organizationAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dm: unable to select from organization_account")
	}

	if err = organizationAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return organizationAccountObj, err
	}

	return organizationAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrganizationAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dm: no organization_account provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationAccountInsertCacheMut.RLock()
	cache, cached := organizationAccountInsertCache[key]
	organizationAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationAccountAllColumns,
			organizationAccountColumnsWithDefault,
			organizationAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationAccountType, organizationAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationAccountType, organizationAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organization_account\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organization_account\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dm: unable to insert into organization_account")
	}

	if !cached {
		organizationAccountInsertCacheMut.Lock()
		organizationAccountInsertCache[key] = cache
		organizationAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrganizationAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrganizationAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationAccountUpdateCacheMut.RLock()
	cache, cached := organizationAccountUpdateCache[key]
	organizationAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationAccountAllColumns,
			organizationAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dm: unable to update organization_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organization_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, organizationAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationAccountType, organizationAccountMapping, append(wl, organizationAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update organization_account row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by update for organization_account")
	}

	if !cached {
		organizationAccountUpdateCacheMut.Lock()
		organizationAccountUpdateCache[key] = cache
		organizationAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all for organization_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected for organization_account")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organization_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, organizationAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to update all in organizationAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to retrieve rows affected all in update all organizationAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrganizationAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dm: no organization_account provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationAccountUpsertCacheMut.RLock()
	cache, cached := organizationAccountUpsertCache[key]
	organizationAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			organizationAccountAllColumns,
			organizationAccountColumnsWithDefault,
			organizationAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			organizationAccountAllColumns,
			organizationAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dm: unable to upsert organization_account, could not build update column list")
		}

		ret := strmangle.SetComplement(organizationAccountAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(organizationAccountPrimaryKeyColumns) == 0 {
				return errors.New("dm: unable to upsert organization_account, could not build conflict column list")
			}

			conflict = make([]string, len(organizationAccountPrimaryKeyColumns))
			copy(conflict, organizationAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"organization_account\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(organizationAccountType, organizationAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationAccountType, organizationAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dm: unable to upsert organization_account")
	}

	if !cached {
		organizationAccountUpsertCacheMut.Lock()
		organizationAccountUpsertCache[key] = cache
		organizationAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrganizationAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrganizationAccount) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("dm: no OrganizationAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationAccountPrimaryKeyMapping)
		sql = "DELETE FROM \"organization_account\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"organization_account\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(organizationAccountType, organizationAccountMapping, append(wl, organizationAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete from organization_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by delete for organization_account")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dm: no organizationAccountQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from organization_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for organization_account")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationAccountPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"organization_account\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationAccountPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationAccountPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"organization_account\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, organizationAccountPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dm: unable to delete all from organizationAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dm: failed to get rows affected by deleteall for organization_account")
	}

	if len(organizationAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrganizationAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganizationAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organization_account\".* FROM \"organization_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationAccountPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dm: unable to reload all in OrganizationAccountSlice")
	}

	*o = slice

	return nil
}

// OrganizationAccountExists checks if the OrganizationAccount row exists.
func OrganizationAccountExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organization_account\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dm: unable to check if organization_account exists")
	}

	return exists, nil
}

// Exists checks if the OrganizationAccount row exists.
func (o *OrganizationAccount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrganizationAccountExists(ctx, exec, o.ID)
}
