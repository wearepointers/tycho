// Generated by sqlboiler-erg: DO NOT EDIT.
package erg

import (
	"github.com/wearepointers/tycho/example/models/dm"
	"time"
)

type Account struct {
	ID        string     `json:"id,omitempty" toml:"id" yaml:"id"`
	FirstName string     `json:"firstName,omitempty" toml:"first_name" yaml:"first_name"`
	LastName  string     `json:"lastName,omitempty" toml:"last_name" yaml:"last_name"`
	Email     string     `json:"email,omitempty" toml:"email" yaml:"email"`
	CreatedAt time.Time  `json:"createdAt,omitempty" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time  `json:"updatedAt,omitempty" toml:"updated_at" yaml:"updated_at"`
	DeletedAt *time.Time `json:"deletedAt,omitempty" toml:"deleted_at" yaml:"deleted_at"`

	AccountSessions      AccountSessionSlice      `json:"accountSessions,omitempty" toml:"account_sessions" yaml:"account_sessions"`
	Comments             CommentSlice             `json:"comments,omitempty" toml:"comments" yaml:"comments"`
	Events               EventSlice               `json:"events,omitempty" toml:"events" yaml:"events"`
	OrganizationAccounts OrganizationAccountSlice `json:"organizationAccounts,omitempty" toml:"organization_accounts" yaml:"organization_accounts"`

	CustomFields `json:"customFields,omitempty" toml:"custom_fields" yaml:"custom_fields"`
}

type AccountSlice []*Account

func ToAccounts(a dm.AccountSlice, acf CustomFieldsSlice, exclude ...string) AccountSlice {
	s := make(AccountSlice, len(a))
	for i, d := range a {
		var cf CustomFields
		if acf != nil {
			if value, ok := acf[d.ID]; ok {
				cf = value
			}
		}

		s[i] = ToAccount(d, cf, exclude...)
	}
	return s
}

func ToAccount(a *dm.Account, customFields CustomFields, exclude ...string) *Account {
	p := Account{
		ID:        a.ID,
		FirstName: a.FirstName,
		LastName:  a.LastName,
		Email:     a.Email,
		CreatedAt: a.CreatedAt,
		UpdatedAt: a.UpdatedAt,
		DeletedAt: nullDotTimeToTimePtr(a.DeletedAt),
	}

	if a.R != nil {
		if a.R.AccountSessions != nil && doesNotContain(exclude, "account.account_session") {
			p.AccountSessions = ToAccountSessions(a.R.AccountSessions, nil, append(exclude, "account_session.account")...)
		}
		if a.R.Comments != nil && doesNotContain(exclude, "account.comment") {
			p.Comments = ToComments(a.R.Comments, nil, append(exclude, "comment.account")...)
		}
		if a.R.Events != nil && doesNotContain(exclude, "account.event") {
			p.Events = ToEvents(a.R.Events, nil, append(exclude, "event.account")...)
		}
		if a.R.OrganizationAccounts != nil && doesNotContain(exclude, "account.organization_account") {
			p.OrganizationAccounts = ToOrganizationAccounts(a.R.OrganizationAccounts, nil, append(exclude, "organization_account.account")...)
		}
	}

	if customFields != nil {
		p.CustomFields = customFields
	}

	return &p
}
