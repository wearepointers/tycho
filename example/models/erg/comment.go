// Generated by sqlboiler-erg: DO NOT EDIT.
package erg

import (
	"github.com/wearepointers/tycho/example/models/dm"
	"time"
)

type Comment struct {
	ID        string     `json:"id,omitempty" toml:"id" yaml:"id"`
	EventID   string     `json:"eventId,omitempty" toml:"event_id" yaml:"event_id"`
	AccountID string     `json:"accountId,omitempty" toml:"account_id" yaml:"account_id"`
	Comment   string     `json:"comment,omitempty" toml:"comment" yaml:"comment"`
	CreatedAt time.Time  `json:"createdAt,omitempty" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time  `json:"updatedAt,omitempty" toml:"updated_at" yaml:"updated_at"`
	DeletedAt *time.Time `json:"deletedAt,omitempty" toml:"deleted_at" yaml:"deleted_at"`

	Account *Account `json:"account,omitempty" toml:"account" yaml:"account"`
	Event   *Event   `json:"event,omitempty" toml:"event" yaml:"event"`

	CustomFields `json:"customFields,omitempty" toml:"custom_fields" yaml:"custom_fields"`
}

type CommentSlice []*Comment

func ToComments(a dm.CommentSlice, acf CustomFieldsSlice, exclude ...string) CommentSlice {
	s := make(CommentSlice, len(a))
	for i, d := range a {
		var cf CustomFields
		if acf != nil {
			if value, ok := acf[d.ID]; ok {
				cf = value
			}
		}

		s[i] = ToComment(d, cf, exclude...)
	}
	return s
}

func ToComment(a *dm.Comment, customFields CustomFields, exclude ...string) *Comment {
	p := Comment{
		ID:        a.ID,
		EventID:   a.EventID,
		AccountID: a.AccountID,
		Comment:   a.Comment,
		CreatedAt: a.CreatedAt,
		UpdatedAt: a.UpdatedAt,
		DeletedAt: nullDotTimeToTimePtr(a.DeletedAt),
	}

	if a.R != nil {
		if a.R.Account != nil && doesNotContain(exclude, "comment.account") {
			p.Account = ToAccount(a.R.Account, nil, append(exclude, "account.comment")...)
		}
		if a.R.Event != nil && doesNotContain(exclude, "comment.event") {
			p.Event = ToEvent(a.R.Event, nil, append(exclude, "event.comment")...)
		}
	}

	if customFields != nil {
		p.CustomFields = customFields
	}

	return &p
}
